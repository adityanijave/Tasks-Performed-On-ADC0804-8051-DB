C51 COMPILER V9.59.0.0   ADC_LDR_MOTOR_CONTROL_MAIN                                        11/10/2023 12:32:17 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE ADC_LDR_MOTOR_CONTROL_MAIN
OBJECT MODULE PLACED IN .\Objects\ADC_LDR_Motor_Control_main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ADC_LDR_Motor_Control_main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND
                    - PRINT(.\Listings\ADC_LDR_Motor_Control_main.lst) TABS(2) OBJECT(.\Objects\ADC_LDR_Motor_Control_main.obj)

line level    source

   1          //including required libs
   2          #include<reg51.h>
   3          #include"lcd.h"
   4          #include"delay.h"
   5          
   6          //micro decleration
   7          #define ADC_port P0;
   8          
   9          //sbit decleration
  10          sbit Rd   = P1^3;                         //Read pin
  11          sbit Wr   = P1^4;                         //write pin
  12          sbit INTR = P1^5;                         //INTR pin
  13          
  14          sbit IN1 = P1^6;
  15          sbit IN2 = P1^7;
  16          sbit EN1 = P3^7;
  17          
  18          sbit low = P3^6;
  19          sbit mid = P3^5;
  20          sbit high = P3^4;
  21          sbit stop = P3^3;
  22          
  23          sbit change_motion_sw = P3^2;
  24          sbit emergency_sw = P2^0;
  25          sbit forword_motion = P3^1;
  26          sbit reverse_motion = P3^0;
  27          
  28          void timer();
  29          void timer_20ms();
  30          void timer_40ms();
  31          void timer_60ms();
  32          
  33          void stop_led();
  34          void low_led();
  35          void mid_led();
  36          void high_led();
  37          
  38          void change_motion();
  39          
  40          void main()                               //main function (1time exe.able)
  41          {
  42   1        
  43   1        unsigned char ADC_value;                //ADC_value variable req. for ADC_port
  44   1        init();                                 //calling init() function to activate the LCD
  45   1        LCD_cmd(0x80);                          //calling LCD_cmd function row-1, col-0
  46   1        LCD_string("ADC = ");                   //calling LCD_string function 
  47   1        LCD_cmd(0x89);                          //calling LCD_cmd function row-1, col-9
  48   1        LCD_data(0xDF);                         //calling LCD_data function with the hex value of degree symbol
  49   1        LCD_data('C');                          //calling LCD_data function with 'C' argument
  50   1        
  51   1        LCD_cmd(0xC0);
  52   1        LCD_string("ADITYA A NIJAVE");
  53   1        
  54   1        TMOD = 0x01;
C51 COMPILER V9.59.0.0   ADC_LDR_MOTOR_CONTROL_MAIN                                        11/10/2023 12:32:17 PAGE 2   

  55   1        EN1 = 1;
  56   1        IN1 = 1;
  57   1        IN2 = 0;
  58   1        forword_motion = 1;
  59   1        reverse_motion = 0;
  60   1        
  61   1        
  62   1        while(1)                                //forever loop (or we can use for(;;))
  63   1        {
  64   2          Rd = 1;                               //Read pin is high
  65   2          Wr = 0;                               //Write pin is low
  66   2          delay(1);                             //calling delay function which is used here to create pluse
  67   2          Wr = 1;                               //Write pin is high
  68   2          while(INTR == 1);                     //if INTR pin is 1 then conversion is in process and if INTR is 0 then conve
             -rsion is complate
  69   2          Rd = 0;                               //Read pin is low
  70   2          
  71   2          ADC_value = ADC_port;                 //assigning the value of ADC_port to ADC_value variable (who's range is fr
             -om 0 to 255)
  72   2          
  73   2          LCD_cmd(0x86);                        //calling LCD_cmd function row-1, col-6
  74   2          LCD_data((ADC_value / 100) + 48);     //calling LCD_data function to pass hundereds place integer 
  75   2          LCD_data(((ADC_value/10)%10)+48);     //calling LCD_data function to pass tens place integer
  76   2          LCD_data((ADC_value % 10) + 48);      //calling LCD_data function to pass units place integer
  77   2          
  78   2          
  79   2          if (0 <= ADC_value && ADC_value <= 5)
  80   2          {
  81   3            stop_led();
  82   3            EN1 = 0;
  83   3          }
  84   2          else if (5 < ADC_value && ADC_value <= 85)
  85   2          {
  86   3            low_led();
  87   3            EN1 = 1;
  88   3            timer_20ms();
  89   3            timer();
  90   3            
  91   3            EN1 = 0;
  92   3          }
  93   2          else if (85 < ADC_value && ADC_value <= 180)
  94   2          {
  95   3            mid_led();
  96   3          
  97   3            EN1 = 1;
  98   3            timer_40ms();
  99   3            timer();
 100   3            
 101   3            EN1 = 0;
 102   3          }
 103   2          else if (181 < ADC_value && ADC_value <= 250)
 104   2          {
 105   3            high_led();
 106   3            
 107   3            EN1 = 1;
 108   3            timer_60ms();
 109   3            timer();
 110   3          }
 111   2          else if (251 <= ADC_value && ADC_value <= 255)
 112   2          {
 113   3            
 114   3            stop_led();
C51 COMPILER V9.59.0.0   ADC_LDR_MOTOR_CONTROL_MAIN                                        11/10/2023 12:32:17 PAGE 3   

 115   3            EN1 = 0;
 116   3          }
 117   2          
 118   2          if (change_motion_sw == 0)
 119   2          {
 120   3            change_motion();
 121   3          }
 122   2          else if (change_motion_sw == 0)
 123   2          {
 124   3            stop_led();
 125   3            EN1 = 0;
 126   3          }
 127   2        }
 128   1      }
 129          
 130          
 131          void timer_20ms()
 132          {
 133   1        TH0 = 0xB7;
 134   1        TL0 = 0xFF;
 135   1      }
 136          
 137          void timer_40ms()
 138          {
 139   1        TH0 = 0x6F;
 140   1        TL0 = 0xFE;
 141   1      }
 142          
 143          void timer_60ms()
 144          {
 145   1        TH0 = 0x27;
 146   1        TL0 = 0xFC;
 147   1      }
 148          
 149          void timer()
 150          {
 151   1        TR0 = 1;
 152   1        while(TF0 == 0);
 153   1        TR0 = 0;
 154   1        TF0 = 0;
 155   1      }
 156          
 157          
 158          void stop_led()
 159          {
 160   1        low = 0;
 161   1        mid = 0;
 162   1        high = 0;
 163   1        stop = 1;
 164   1      }
 165          
 166          void high_led()
 167          {
 168   1        low = 0;
 169   1        mid = 0;
 170   1        high = 1;
 171   1        stop = 0;
 172   1      }
 173          
 174          void mid_led()
 175          {
 176   1        low = 0;
C51 COMPILER V9.59.0.0   ADC_LDR_MOTOR_CONTROL_MAIN                                        11/10/2023 12:32:17 PAGE 4   

 177   1        mid = 1;
 178   1        high = 0;
 179   1        stop = 0;
 180   1      }
 181          
 182          void low_led()
 183          {
 184   1        low = 1;
 185   1        mid = 0;
 186   1        high = 0;
 187   1        stop = 0;
 188   1      }
 189          
 190          void change_motion()
 191          {
 192   1        IN1 = ~IN1 ; 
 193   1        IN2 = ~IN2;
 194   1        
 195   1        forword_motion = ~forword_motion;
 196   1        reverse_motion = ~reverse_motion;
 197   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    388    ----
   CONSTANT SIZE    =     23    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
